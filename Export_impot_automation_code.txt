####################### Varrible Declaration ####################################
##ENTER THE BELOW DETAILS##
$sourceresourcegroup='YOUR RESOURCE GROUP NAME'
$sourceServer = 'SOURCE SERVER NAME'
$sourceDB = 'SOURCE DATABASE NAME' 
$SourceDBEdition = 'SOURCE DB EDITION EG: Standard'
$RequestedServiceObjectiveName = ' SKU YOU WANT THE SOURCE DB TO BE SCALED UP BEFORE EXPORT eg: s4'
$TargetResourcegroup = 'TARGET RESOUCE GROUP NAME'
$targetServer='TARGET SERVER NAME'
$targetDB='TARGET DATABASE NAME'
$targetEdition = 'TARGET DATABASE EDITION (EG: BASIC/STANDARD etc..)'
$targetslo = 'TARGET SKU (S4/s6 etc..)'
$targetmaxsizeofDB = 2147483648 #TARGET SIZE
$BaseStorageUri = "https://Example.blob.core.windows.net/example"  #STORAGE URI
$StorageKeytype = "SharedAccessKey"
$StorageKey = "sp=racwdl&st=2021-10-*********8nmLl5M%3D" # SAS KEY WITH FULL ACCESS
$bacpacFilename = "$sourceDB" + (Get-Date).ToString("yyyy-MM-dd-HH-mm") + ".bacpac"
$BacpacUri = $BaseStorageUri + "/test/" + $bacpacFilename
$SourceCred = Get-AutomationPSCredential -Name "SourceServer"
$TargetCred = Get-AutomationPSCredential -Name "TargetServer"

##################Establish a connection to ARM through AZ###############################

$connectionName = "AzureRunAsConnection"
try
{
    # Get the connection "AzureRunAsConnection "
    $Conn = Get-AutomationConnection -Name $connectionName   
    "Logging in to Azure..."
    Connect-AzAccount -ServicePrincipal -Tenant $Conn.TenantID -ApplicationId $Conn.ApplicationID -CertificateThumbprint $Conn.CertificateThumbprint
    }
catch {
    if (!$Conn)
    {
        $ErrorMessage = "Connection $connectionName not found."
        throw $ErrorMessage
    } else{
        Write-Error -Message $_.Exception
        throw $_.Exception
    }
}

###################  Function Defination  ############################################

function Checkimportexport($operationID)
{
$Actualstatus = Get-AzSqlDatabaseImportExportStatus -OperationStatusLink $operationID |select -ExpandProperty  status
While( $Actualstatus -eq "InProgress")
   {
   $Actualstatus = Get-AzSqlDatabaseImportExportStatus -OperationStatusLink $operationID |select -ExpandProperty  status
   start-sleep -s 10
   if($Actualstatus -eq "Succeeded")
     {
      Write-host 'import/export sucessfull'
      break
     }
    elseif($Actualstatus -eq "failed")
      {
       Write-host 'impot/export Failed'
       break
      }
 }
 return $Actualstatus
}


function ScalingConfirmation($scaledDB)
{
 $ScalingStats =  Get-AzSqlDatabase -ResourceGroupName $sourceresourcegroup -ServerName $sourceServer -DatabaseName $sourceDB | select -Expandproperty CurrentServiceObjectiveName
 while($ScalingStats -ne $RequestedServiceObjectiveName)
  {
      $ScalingStats =  Get-AzSqlDatabase -ResourceGroupName $sourceresourcegroup -ServerName $sourceServer -DatabaseName $scaledDB | select -Expandproperty CurrentServiceObjectiveName
      start-sleep -s 10
  }
  return $ScalingStats
}

function Checkdropstats($dropDbname)
  {
     $Dstatus = Get-AzSqlDatabase -ResourceGroupName $TargetResourcegroup -ServerName $targetServer -DatabaseName $dropDbname | Select -ExpandProperty DatabaseName
     while($Dstatus -eq $dropDbname)
      {
        start-sleep -s 10
        $Dstatus = Get-AzSqlDatabase -ResourceGroupName $TargetResourcegroup -ServerName $targetServer -DatabaseName $dropDbname | Select -ExpandProperty DatabaseName

      }
  return $Dstatus
  }


####################  Code flow Phase 1 - export to Storage  ########################################################## 

$currentSKU = Get-AzSqlDatabase -ResourceGroupName $sourceresourcegroup -ServerName $sourceServer -DatabaseName $sourceDB | select -Expandproperty CurrentServiceObjectiveName
if($currentSKU -ne $RequestedServiceObjectiveName)
{
  $Scaling = Set-AzSqlDatabase -ResourceGroupName $sourceresourcegroup -ServerName $sourceServer -DatabaseName $sourceDB $SourceDBEdition Standard -RequestedServiceObjectiveName $RequestedServiceObjectiveName |select -Expandproperty CurrentServiceObjectiveName
}
$scalingresult = ScalingConfirmation -scaledDB $Scaling.DatabaseName
if($scalingresult -eq $RequestedServiceObjectiveName)
  {
$exportRequest = New-AzSqlDatabaseExport -ResourceGroupName $sourceresourcegroup -ServerName $sourceServer -DatabaseName $sourceDB  -StorageKeytype $StorageKeytype -StorageKey $StorageKey -StorageUri $BacpacUri -AuthenticationType Sql -AdministratorLogin $SourceCred.Username -AdministratorLoginPassword $SourceCred.password
$exportStatus= Checkimportexport -operationID $exportRequest.OperationStatusLink
   }
if($exportStatus -eq 'Succeeded')
  {
  $scaleback = Set-AzSqlDatabase -ResourceGroupName $sourceresourcegroup -ServerName $sourceServer -DatabaseName $sourceDB -Edition $SourceDBEdition -RequestedServiceObjectiveName $currentSKU
    }
##################  Code flow phase 2 - Import to Server  ###############################################################


if($exportStatus -eq "Succeeded")
{
    $Checktarget = Get-AzSqlDatabase -ResourceGroupName $TargetResourcegroup -ServerName $targetServer -DatabaseName $targetDB | Select -ExpandProperty DatabaseName
}
   if($Checktarget -eq $targetDB)
    {
           $drop=Remove-AzSqlDatabase -ResourceGroupName $TargetResourcegroup -ServerName $targetServer -DatabaseName $targetDB  | Select -ExpandProperty DatabaseName
           $dropstatus = Checkdropstats($targetDB)
           if($dropstatus -ne $targetDB)
           {
           $importRequest = New-AzSqlDatabaseImport -ResourceGroupName $TargetResourcegroup -ServerName $targetServer -DatabaseName $targetDB -StorageKeyType $StorageKeytype -StorageKey $StorageKey -StorageUri $BacpacUri -Edition $targetEdition -ServiceObjectiveName $targetslo -DatabaseMaxSizeBytes $targetmaxsizeofDB -AuthenticationType Sql -AdministratorLogin $TargetCred.Username  -AdministratorLoginPassword $TargetCred.password
           }
        }
    else
      {
        $importRequest = New-AzSqlDatabaseImport -ResourceGroupName $TargetResourcegroup -ServerName $targetServer -DatabaseName $targetDB -StorageKeyType $StorageKeytype -StorageKey $StorageKey -StorageUri $BacpacUri -Edition $targetEdition -ServiceObjectiveName $targetslo -DatabaseMaxSizeBytes $targetmaxsizeofDB -AuthenticationType Sql -AdministratorLogin $TargetCred.Username  -AdministratorLoginPassword $targetcred.password
      }
 $importStatus = Checkimportexport -operationID  $importRequest.OperationStatusLink
